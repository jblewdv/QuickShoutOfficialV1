#!/usr/bin/env node
var command = process.argv[2]
var args    = process.argv.slice(3)

var TIMEOUT = 3 * 60 * 1000

function fail(message) {
  console.error("feedbase: " + message)
  process.exit(1)
}

function dump(object) {
  console.log(JSON.stringify(object, null, 2))
}

if (command.replace(/^--/, "") == "version") {
  console.log(require("../package.json").version)
  process.exit(0)
}

var feedbase = (function() {
  try {
    return require("..")()
  } catch (error) {
    fail(error.message)
  }
})()

var method

if (command == "inspect") {
  dump(feedbase.inspect(args[0]))
} else if (command == "watch") {
  feedbase.filter({}, function(error, id) {
    if (error) {
      fail(error.message)
    } else {
      dump(feedbase.inspect(id))
    }
  })
} else if (method = feedbase[command.replace(/-/g, "_")]) {
  method.apply(feedbase, args)

  if (command == "claim") {
    setTimeout(function() {
      fail("error: timed out (unsynced blockchain?)")
    }, TIMEOUT)

    feedbase.filter({}, function(error, id) {
      if (error) {
        fail(error.message)
      } else if (feedbase.owner(id) == feedbase.account) {
        dump(feedbase.inspect(id));
        process.exit(0)
      } else {
        console.warn(JSON.stringify(
          feedbase.inspect(id), null, 2
        ).replace(/^/gm, "debug: "));
      }
    })
  }
} else {
  fail("error: unknown command: " + command)
}
